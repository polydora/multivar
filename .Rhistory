monotonic$Fitted_monotonic <- isoreg(monotonic$Distance, monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(389)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(39)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(37)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
stress <- with(
monotonic,
sqrt(sum((RND_Distance - Fitted_monotonic)^2) / sum((RND_Distance)^2))
)
rnd_ord <- data.frame(ord1$points)
set.seed(36)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(35)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(34)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(38)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(37)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(36)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
rnd1 <- c( 0.7485999,  0.8334655, -0.7273975,  0.1439452, -0.1557106,  0.1390855)
rnd2 <- c( 0.33177854,  0.80112661, -0.55671397, -0.08128363, -0.28846371, -0.93977094)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnd1
rnd_ord$RND2 <- rnd_ord$MDS2 - rnd2
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(374)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(334)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.3)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.3)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.2)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.2)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.1)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.1)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.01)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.01)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(97)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.01)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.01)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(97)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.1)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.1)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
monotonic$Fitted_monotonic <- isoreg(x = monotonic$Distance, y = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
vegdist(red_abund)
red_abund
red_abund <- abund[abund$Station %in% obj, -1]
red_abund <- log_abund[log_abund$Station %in% obj, ]
row.names(red_abund) <- obj
log_abund[log_abund$Station %in% obj, ]
log_abund
log_abund$Station %in% obj
red_abund <- log_abund[abund$Station %in% obj, ]
row.names(red_abund) <- obj
ord1 <- metaMDS(red_abund, distance = "bray")
red_abund <- abund[abund$Station %in% obj, -1]
row.names(red_abund) <- obj
ord1 <- metaMDS(red_abund, distance = "bray")
red_abund <- log_abund[abund$Station %in% obj, ]
row.names(red_abund) <- obj
ord1 <- metaMDS(red_abund, distance = "bray")
ordiplot(ord1, display = "sites", type = "text")
ggplot(data.frame(ord1$points), aes(x = MDS1, y = MDS2)) + geom_point() + geom_text(aes(label = row.names(ord1$points)), vjust = -0.5)
vegdist(red_abund[])
dist_compare <- data.frame(Bray = as.vector(vegdist(red_abund[, -1])), MDS = as.vector(vegdist(ord1$points, method = "euclidean")))
ggplot(dist_compare, aes(x = Bray, y = MDS)) + geom_point(size = 4) + xlab("Bray-Curtis dissimilarity") + ylab("Distance between points on ordination")
stressplot(ord1)
rnd_ord <- data.frame(ord1$points)
set.seed(97)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.1)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.1)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(x = monotonic$Distance, y = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
ggplot(dist_compare, aes(x = Bray, y = MDS)) + geom_point(size = 4) + xlab("Bray-Curtis dissimilarity") + ylab("Distance between points on ordination")
stressplot(ord1)
pl1
stressplot(ord1)
monotonic$Fitted_monotonic <- isoreg(x = monotonic$Distance, y = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
ord3 <- metaMDS(log_abund, k = 3, trace = FALSE)
op <- par(mfrow = c(1, 2))
ordiplot(ord, display = "site", type = "text", main = "Bray-Curtis")
ordiplot(ord4, display = "site", type = "text", main = "Euclidean")
par(op)
pl6 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Depth)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "white", high = "black") + labs(fill = "Depth") + theme_void()
pl6
th <- theme( panel.background = element_rect(fill = "white", color = "black"), axis.ticks.x = element_blank(), axis.ticks.y = element_blank(), axis.text = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), legend.position = "bottom")
pl6 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Depth)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "white", high = "black") + labs(fill = "Depth") + th
pl7 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Sal)) + geom_point(shape = 21, size = 4)  + scale_fill_gradient(low = "cyan", high = "darkblue") + labs(fill = "Salinity")+ th
pl8 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Temp)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "yellow", high = "red")  + labs(fill = "Temperature")+ th
pl9 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Water_content)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "green", high = "black")  + labs(fill = "Water content") + th
grid.arrange(pl6, pl7, pl8, pl9, ncol = 2)
library(gridExtra)
abund <- read.table("data/dolg_abundance.txt", skip = 1, header = TRUE, sep = ";")
hydrol <- read.table("data/dolg_hydrology.txt", skip = 1, header = TRUE, sep = ";")
library(ggplot2)
theme_bw()
theme_set(theme_bw())
head(hydrol)
ggplot(data = hydrol, aes(x = Temp, y = Sal)) + geom_point()
head(abund)
sum(is.na(abund))
tot_abund <- rowSums(abund[, -1])
tot_abund
ggplot(data = hydrol, aes(x = Temp, y = Sal)) + geom_point(size = tot_abund)
ggplot(data = hydrol, aes(x = Temp, y = Sal)) + geom_point(aes(size = tot_abund))
ggplot(data = hydrol, aes(x = Temp, y = Sal)) + geom_point(aes(size = tot_abund)) + labs(title = "Ординация", x = "Температура", y = "Соленость", size = "Общее\nобилие")
library (vegan)
ord <- metaMDS(log_abund, distance = "bray", k = 2) # результаты сохраняются в объекте ord
log_abund <- log(abund[, -1] + 1)
row.names(log_abund) <- abund$Station
ord <- metaMDS(log_abund, distance = "bray", k = 2) # результаты сохраняются в объекте ord
ord
ordiplot(ord, display = "sites")
ordiplot(ord, display = "sites", type = "t")
summary(ord)
str(ord)
ord$points
head(ord$points)
class(ord$points)
df_ord <- as.data.frame(ord$points)
class(df_ord)
ggplot(data = df_ord, aes(x = MDS1, y = MDS2)) + geom_point()
ggplot(data = df_ord, aes(x = MDS1, y = MDS2)) + geom_point(data = hydrol, aes(colour = Depth))
ggplot(data = df_ord, aes(x = MDS1, y = MDS2)) + geom_point(data = hydrol, aes(colour = hydrol$Depth))
ggplot(data = df_ord, aes(x = MDS1, y = MDS2)) + geom_point(aes(colour = hydrol$Depth))
abund$Station %in% obj
obj <- c("S17", "S33", "S37", "S38", "S44", "S59")
abund$Station %in% obj
red_abund <- log_abund[abund$Station %in% obj, ]
ord1 <- metaMDS(red_abund, distance = "bray", k = 2)
ordiplot(ord, display = "sites", type = "t")
red_abund <- log_abund[abund$Station %in% obj, ]
ord1 <- metaMDS(red_abund, distance = "bray", k = 2)
ordiplot(ord, display = "sites", type = "t")
ordiplot(ord1, display = "sites", type = "t")
vegdist(red_abund, method = "bray")
vegdist(red_abund, method = "bray")
dist_compare <- data.frame(Bray = as.vector(vegdist(red_abund[, -1])), MDS = as.vector(vegdist(ord1$points, method = "euclidean")))
ggplot(dist_compare, aes(x = Bray, y = MDS)) + geom_point(size = 4) + xlab("Bray-Curtis dissimilarity") + ylab("Distance between points on ordination")
stressplot(ord1)
ordiplot(ord)
stressplot(ord)
ord
ord$stress
ord4 <- metaMDS(log_abund, k = 2, distance = "eucl")
op <- par(mfrow = c(1, 2))
ordiplot(ord, display = "site", type = "text", main = "Bray-Curtis")
ordiplot(ord4, display = "site", type = "text", main = "Euclidean")
par(op)
procrust <- procrustes(ord, ord4)
plot(procrust)
th <- theme( panel.background = element_rect(fill = "white", color = "black"), axis.ticks.x = element_blank(), axis.ticks.y = element_blank(), axis.text = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), legend.position = "bottom")
ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Depth)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "white", high = "black") + labs(fill = "Depth") + th
ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Sal)) + geom_point(shape = 21, size = 4)  + scale_fill_gradient(low = "cyan", high = "darkblue") + labs(fill = "Salinity")+ th
ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Temp)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "yellow", high = "red")  + labs(fill = "Temperature")+ th
ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Water_content)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "green", high = "black")  + labs(fill = "Water content") + th
pl6 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Depth)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "white", high = "black") + labs(fill = "Depth") + th
pl7 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Sal)) + geom_point(shape = 21, size = 4)  + scale_fill_gradient(low = "cyan", high = "darkblue") + labs(fill = "Salinity")+ th
pl8 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Temp)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "yellow", high = "red")  + labs(fill = "Temperature")+ th
pl9 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Water_content)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "green", high = "black")  + labs(fill = "Water content") + th
library(gridExtra)
grid.arrange(pl6, pl7, pl8, pl9, ncol = 2)
