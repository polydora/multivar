dat7 <- data.frame(X = c(0, 0, 0, 4, 5, 6, 7, 8, 9, 10), Y = c(1, 2, 3, 4, 0, 0, 0,8, 9, 10 ), Z = c(0, 0, 0, 0, 0, 0, 7, 8, 9, 10))
mds_eucl <- metaMDS(dat7, distance = "euclidean", autotransform = FALSE)
mds_bray <- metaMDS(dat7, distance = "bray", autotransform = FALSE)
mds_manch <- metaMDS(dat7, distance = "manhattan", autotransform = FALSE)
dat8 <- data.frame(X = c(0, 0, 0, 1, 1, 1, 1, 1, 1, 1), Y = c(1, 1, 1, 1, 0, 0, 0,1, 1, 1 ), Z = c(0, 0, 0, 0, 0, 0, 1, 1, 1, 1))
mds_jac <- metaMDS(dat8, distance = "jaccard", autotransform = FALSE)
pl_mds1 <- ggplot(data.frame(MDS1 = mds_eucl$points[,1], MDS2 = mds_eucl$points[,2]), aes(x = MDS1, y = MDS2)) + geom_point(size = 4) + theme_bw() + ggtitle("Euclidean")
pl_mds2 <- ggplot(data.frame(MDS1 = mds_manch$points[,1], MDS2 = mds_manch$points[,2]), aes(x = MDS1, y = MDS2)) + geom_point(size = 4) + theme_bw() + ggtitle("Manchattan")
pl_mds3 <- ggplot(data.frame(MDS1 = mds_bray$points[,1], MDS2 = mds_bray$points[,2]), aes(x = MDS1, y = MDS2)) + geom_point(size = 4) + theme_bw() + ggtitle("Bray-Curtis")
pl_mds4 <- ggplot(data.frame(MDS1 = mds_jac$points[,1], MDS2 = mds_jac$points[,2]), aes(x = MDS1, y = MDS2)) + geom_point(size = 4) + theme_bw() + ggtitle("Jaccard")
grid.arrange(pl_mds1, pl_mds2 , pl_mds3 , pl_mds4, ncol = 2)
row.names(protein) <- protein$Country
mds <- metaMDS(protein [,-1], distance = "euclidean", autotransform = FALSE)
plot(mds,type = "n", main = "Euclidean distance")
text(mds, display = "sites", cex = 1)
mds <- metaMDS(protein [,-1], distance = "bray", autotransform = FALSE)
# points(mds, display = "sites")
plot(mds,type = "n", main = "Bray-Curtis")
text(mds, display = "sites", cex = 1)
plejada(protein [, -1], Dcrit = 0.3)
library(gplots)
op <- par(mar = c(3, 1, 0, 0))
heatmap.2 (as.matrix(vegdist(protein[,-1], method = "bray")), Rowv = F, dendrogram = "none", Colv = FALSE, density.info = "none", key = TRUE, trace = "none", col = colorpanel(3, low = "black", mid = "gray", high = "white"))
par(op)
heatmap.2 (as.matrix(vegdist(protein[,-1], method = "bray")), Rowv = T, distfun = vegdist, dendrogram = "none", density.info = "none", key = TRUE, trace = "none", col = colorpanel(3, low = "black", mid = "gray", high = "white"))
dat <- data.frame(trait = c(rnorm(100, 10,1), rnorm(100, 15, 1)), object = rep(c("a","b"), each = 100))
library(ggplot2)
ggplot(dat[1:100,], aes(x = trait)) + geom_histogram(binwidth = 0.5, color = "black", fill = "blue") + xlab("Character") + theme_bw() + geom_histogram(data = dat[101:200,], aes(x = trait), binwidth = 0.5, color = "black", fill = "red") + ggtitle("Character distribution ")
ax <- rnorm(100, 10, 1)
ay <- 7*ax + rnorm(100, 0, 5)
bx <- rnorm(100, 11, 1)
by <- -0.5*bx + 70 + rnorm(100, 0, 3)
dat <- data.frame(x = c(ax, bx), y = c(ay, by), object = rep(c("a","b"), each = 100))
pl1 <- ggplot(dat, aes(x = x, y = y)) + geom_point(aes(color = object), size = 3) + xlab("Character 1") + ylab("Character 2") + theme_bw() + guides(color = F) + scale_color_manual(values = c("blue", "red"))
pl2 <- ggplot(dat, aes(x = x)) + geom_histogram(binwidth = 0.5, color = "black", fill = "gray") + xlab("Character 1") + theme_bw()
pl3 <- ggplot(dat, aes(x = y)) + geom_histogram(binwidth = 3, color = "black", fill = "gray") + xlab("Character 2") + theme_bw()
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(37)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
stress <- with(
monotonic,
sqrt(sum((RND_Distance - Fitted_monotonic)^2) / sum((RND_Distance)^2))
)
rnd_ord <- data.frame(ord1$points)
set.seed(36)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(35)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(34)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(38)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(37)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(36)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
rnd1 <- c( 0.7485999,  0.8334655, -0.7273975,  0.1439452, -0.1557106,  0.1390855)
rnd2 <- c( 0.33177854,  0.80112661, -0.55671397, -0.08128363, -0.28846371, -0.93977094)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnd1
rnd_ord$RND2 <- rnd_ord$MDS2 - rnd2
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(374)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(334)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points))
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points))
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.3)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.3)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.2)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.2)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.1)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.1)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(987)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.01)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.01)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(97)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.01)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.01)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
rnd_ord <- data.frame(ord1$points)
set.seed(97)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.1)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.1)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(y = monotonic$Distance, x = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
monotonic$Fitted_monotonic <- isoreg(x = monotonic$Distance, y = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
vegdist(red_abund)
red_abund
red_abund <- abund[abund$Station %in% obj, -1]
red_abund <- log_abund[log_abund$Station %in% obj, ]
row.names(red_abund) <- obj
log_abund[log_abund$Station %in% obj, ]
log_abund
log_abund$Station %in% obj
red_abund <- log_abund[abund$Station %in% obj, ]
row.names(red_abund) <- obj
ord1 <- metaMDS(red_abund, distance = "bray")
red_abund <- abund[abund$Station %in% obj, -1]
row.names(red_abund) <- obj
ord1 <- metaMDS(red_abund, distance = "bray")
red_abund <- log_abund[abund$Station %in% obj, ]
row.names(red_abund) <- obj
ord1 <- metaMDS(red_abund, distance = "bray")
ordiplot(ord1, display = "sites", type = "text")
ggplot(data.frame(ord1$points), aes(x = MDS1, y = MDS2)) + geom_point() + geom_text(aes(label = row.names(ord1$points)), vjust = -0.5)
vegdist(red_abund[])
dist_compare <- data.frame(Bray = as.vector(vegdist(red_abund[, -1])), MDS = as.vector(vegdist(ord1$points, method = "euclidean")))
ggplot(dist_compare, aes(x = Bray, y = MDS)) + geom_point(size = 4) + xlab("Bray-Curtis dissimilarity") + ylab("Distance between points on ordination")
stressplot(ord1)
rnd_ord <- data.frame(ord1$points)
set.seed(97)
rnd_ord$RND1 <- rnd_ord$MDS1 - rnorm(nrow(ord1$points), sd = 0.1)
rnd_ord$RND2 <- rnd_ord$MDS2 - rnorm(nrow(ord1$points), sd = 0.1)
pl1 <- ggplot(rnd_ord, aes(x = MDS1, y = MDS2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("MDS ordination")
pl2 <- ggplot(rnd_ord, aes(x = RND1, y = RND2)) + geom_text(label = row.names(rnd_ord))  + ggtitle("Random ordination")
library(gridExtra)
grid.arrange(pl1, pl2)
# расстояния между точками
monotonic <- unfolding(red_abund[, -1], method = "bray")
# расстояния между случайно расположенными точками
monotonic$RND_Distance <- as.vector(dist(rnd_ord[, 3:4]))
# сортируем по возрастанию расстояния между точками
monotonic <- monotonic[order(monotonic$Distance), ]
monotonic
monotonic$Fitted_monotonic <- isoreg(x = monotonic$Distance, y = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
ggplot(dist_compare, aes(x = Bray, y = MDS)) + geom_point(size = 4) + xlab("Bray-Curtis dissimilarity") + ylab("Distance between points on ordination")
stressplot(ord1)
pl1
stressplot(ord1)
monotonic$Fitted_monotonic <- isoreg(x = monotonic$Distance, y = monotonic$RND_Distance)$yf
pl3 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)")
pl4 <- ggplot(monotonic, aes(x = Distance)) + geom_line(aes(y = Fitted_monotonic), color = "blue") + geom_point(aes(y = RND_Distance), size = 4) + geom_segment(aes(xend = Distance, y = RND_Distance, yend =  Fitted_monotonic)) + xlab("Dissimilarity") + ylab("Distance on ordination(Z)") + geom_text(x = 0.5, y = 1.8, label = "Zh - deviation from \nfitted monotone regession")
grid.arrange(pl3, pl4)
ord3 <- metaMDS(log_abund, k = 3, trace = FALSE)
op <- par(mfrow = c(1, 2))
ordiplot(ord, display = "site", type = "text", main = "Bray-Curtis")
ordiplot(ord4, display = "site", type = "text", main = "Euclidean")
par(op)
pl6 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Depth)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "white", high = "black") + labs(fill = "Depth") + theme_void()
pl6
th <- theme( panel.background = element_rect(fill = "white", color = "black"), axis.ticks.x = element_blank(), axis.ticks.y = element_blank(), axis.text = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.title = element_blank(), legend.position = "bottom")
pl6 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Depth)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "white", high = "black") + labs(fill = "Depth") + th
pl7 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Sal)) + geom_point(shape = 21, size = 4)  + scale_fill_gradient(low = "cyan", high = "darkblue") + labs(fill = "Salinity")+ th
pl8 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Temp)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "yellow", high = "red")  + labs(fill = "Temperature")+ th
pl9 <- ggplot(data.frame(ord$points), aes(x = MDS1, y = MDS2, fill = hydrol$Water_content)) + geom_point(shape = 21, size = 4) + scale_fill_gradient(low = "green", high = "black")  + labs(fill = "Water content") + th
grid.arrange(pl6, pl7, pl8, pl9, ncol = 2)
library(gridExtra)
abund <- read.table("data/dolg_abundance.txt", skip = 1, header = TRUE, sep = ";")
hydrol <- read.table("data/dolg_hydrology.txt", skip = 1, header = TRUE, sep = ";")
library(ggplot2)
theme_bw()
theme_set(theme_bw())
head(hydrol)
ggplot(data = hydrol, aes(x = Temp, y = Sal)) + geom_point()
head(abund)
sum(is.na(abund))
tot_abund <- rowSums(abund[, -1])
tot_abund
ggplot(data = hydrol, aes(x = Temp, y = Sal)) + geom_point(size = tot_abund)
ggplot(data = hydrol, aes(x = Temp, y = Sal)) + geom_point(aes(size = tot_abund))
ggplot(data = hydrol, aes(x = Temp, y = Sal)) + geom_point(aes(size = tot_abund)) + labs(title = "Ординация", x = "Температура", y = "Соленость", size = "Общее\nобилие")
library (vegan)
vegdist(protein[, -1], method = "euclidian")
plejada <- function (data, method = "bray", Dcrit) {
# n - число точек
# p - период
library(ggplot2)
p <- n <- nrow(data)
factor <- points <- data.frame(X = c(1:n), Y = c(1:n))
k <- 0
for (i in 1:n){
factor$X[i] <- (i-1)/p - k
if ((i/p - trunc(i/p)) == 0) {
k <- k + 1
}
}
factor$Y <- factor$X
for (i in 1:n){
points$X[i] <- cos(2*pi*factor$X[i])
points$Y[i] <- sin(2*pi*factor$Y[i])
}
lab <- as.character(1:n)
pl <- ggplot(points, aes(x = X, y = Y)) + geom_text(label = lab, size = 6) + theme_void()
library(vegan)
dist <- as.matrix(vegdist(data, method = method))
for ( i in 1:n) {
for (j in i:n) {
if (dist[i, j] <= Dcrit) {
pl <- pl + geom_segment(x = points$X[i], y = points$Y[i], xend = points$X[j], yend = points$Y[j], color = "red")
}
}
}
pl
}
plejada (protein [, -1], Dcrit = 0.1)
protein <- read.table("Protein.txt", header = TRUE, sep = "\t")
protein <- read.table("data/Protein.txt", header = TRUE, sep = "\t")
protein <- read.table("data/Protein.txt", header = TRUE, sep = "\t")
head(protein)
total <- apply(X = protein[,-1], MARGIN = 1, FUN = sum)
protein_rel <- protein[,-1]/total
row.names(protein_rel) <- protein$Country
row.names(protein) <- protein$Country
vegdist(protein[,-1], method = "euclidean")
install.packages("vegan")
BCD <- as.vector(vegdist(protein[,-1], method = "bray"))
library(vegan)
BCD <- as.vector(vegdist(protein[,-1], method = "bray"))
ED <- as.vector(vegdist(protein[,-1], method = "euclidean"))
distances <- data.frame(Bray = BCD, Euclid = ED)
ggplot(distances, aes(x=Euclid, y=Bray)) + geom_point() + theme_bw()
library(ggplot2)
BCD <- as.vector(vegdist(protein[,-1], method = "bray"))
ED <- as.vector(vegdist(protein[,-1], method = "euclidean"))
distances <- data.frame(Bray = BCD, Euclid = ED)
ggplot(distances, aes(x=Euclid, y=Bray)) + geom_point() + theme_bw()
row.names(protein) <- protein$Country
mds1 <- metaMDS(protein [,-1], distance = "euclidean", autotransform = FALSE)
points(mds,  display = "sites")
mds1 <- metaMDS(protein [,-1], distance = "euclidean", autotransform = FALSE)
points(mds1,  display = "sites")
text(mds1, display = "sites", cex = 1)
plot(mds1,type = "n", main = "Euclidean distance")
points(mds1,  display = "sites")
text(mds1, display = "sites", cex = 1)
text(mds1, display = "sites", cex = 0.1)
plot(mds1,type = "n", main = "Euclidean distance")
points(mds1,  display = "sites")
text(mds1, display = "sites", cex = 0.1)
text(mds1, display = "sites", cex = 0.5)
points(mds1,  display = "sites")
text(mds1, display = "sites", cex = 0.5)
mds2 <- metaMDS(protein [,-1], distance = "bray", autotransform = FALSE)
plot(mds2,type = "n", main = "Bray-Curtis")
text(mds2, display = "sites", cex = 1)
plot(mds1,type = "n", main = "Euclidean distance")
text(mds1, display = "sites", cex = 1)
data(varespec)
library(vegan)
data(varespec)
data(varechem)
varespec
varechem
veg_MDS <- as.data.frame(veg_ord$points)
veg_MDS <- as.data.frame(veg_ord$points)
ggplot(veg_MDS, aes(x = MDS1, y = MDS2, fill = varechem$Al))  + geom_point(shape=21, size =4)+ scale_fill_gradient(low = "cyan", high = "darkblue") + theme_bw()  + labs(fill = "Aluminium concentration")
veg_ord <- metaMDS(varespec)
veg_ord <- metaMDS(varespec)
veg_ord <- metaMDS(varespec)
veg_MDS <- as.data.frame(veg_ord$points)
ggplot(veg_MDS, aes(x = MDS1, y = MDS2, fill = varechem$Al))  + geom_point(shape=21, size =4)+ scale_fill_gradient(low = "cyan", high = "darkblue") + theme_bw()  + labs(fill = "Aluminium concentration")
library(ggplot2)
ggplot(veg_MDS, aes(x = MDS1, y = MDS2, fill = varechem$Al))  + geom_point(shape=21, size =4)+ scale_fill_gradient(low = "cyan", high = "darkblue") + theme_bw()  + labs(fill = "Aluminium concentration")
ggplot(veg_MDS, aes(x = MDS1, y = MDS2, fill = varechem$Al))  + geom_point(shape=21, size =4)+ scale_fill_gradient(low = "cyan", high = "darkblue") + theme_bw()  + labs(fill = "Aluminium concentration") + scale_fill_gradient(high = "red", low = "yellow")
env_fit <- envfit(veg_ord, varechem)
env_fit
env_fit
plot(veg_ord, display = "site")
plot(env_fit)
plot(env_fit)
plot(veg_ord, display = "site")
plot(env_fit)
env_fit2 <- envfit(veg_ord ~ Al + Mn, data = varechem)
plot(veg_ord, display = "site")
plot(env_fit2, col = "red")
ordisurf(veg_ord, varechem$Al,
add = TRUE, col="blue")
ordisurf(veg_ord, varechem$Mn,
add = TRUE, col="green")
dist_com <- vegdist(varespec, method = "bray")
dist_chem <- vegdist(varechem, method = "euclidean")
x <-as.vector(dist_com)
y <- as.vector(dist_chem)
R <- round(cor(x, y, method="spearman"), 3)
xy <- data.frame (x, y)
mant <- ggplot(xy, aes(x=x, y=y))
mant + geom_point(size=3) + xlab ("Biological dissimilarity") + ylab ("Chemical dissimilarity") + annotate("text", x=0.25, y=0.35, label=paste("Rspearmen =", R, sep=" ")) + theme_bw() + geom_smooth(method = "lm", se = FALSE)
options(digits=4)
mant <- mantel(dist_com, dist_chem, method="spearman", permutations = 999)
mant
geo <- read.table("Coordinates.txt",
header = TRUE, sep = "\t")
dist_geo <- vegdist(geo[, -1],
method = "euclidean")
geo <- read.table("Coordinates.txt",
header = TRUE, sep = "\t")
geo <- read.table("Coordinates.txt",
header = TRUE, sep = "\t")
geo <- read.table("Coordinates.txt",
header = TRUE, sep = "\t")
geo <- read.table(/data/"Coordinates.txt",
geo <- read.table("/data/Coordinates.txt",
header = TRUE, sep = "\t")
geo <- read.table("\data\Coordinates.txt",
header = TRUE, sep = "\t")
geo <- read.table("\data\Coordinates.txt",
header = TRUE, sep = "\t")
geo <- read.table("\data\Coordinates.txt",  header = TRUE, sep = "\t")
geo <- read.table("data/Coordinates.txt",  header = TRUE, sep = "\t")
geo <- read.table("data/Coordinates.txt",  header = TRUE, sep = "\t")
dist_geo <- vegdist(geo[, -1],
method = "euclidean")
geo
dist_geo
mantel_partial <- mantel.partial(dist_com, dist_chem, dist_geo, method = "pearson", permutations = 9999)
mantel_partial
mant
mantel_partial
BioEnv <- bioenv(varespec, varechem, method = "spearman", index = "bray")
#-- RUN THE FRAGMENT BETWEEN LINES BEFORE COMPILING MARKDOWN
# to configure markdown parsing
options(markdown.extensions = c("no_intra_emphasis", "tables", "fenced_code", "autolink", "strikethrough", "lax_spacing", "space_headers", "latex_math"))
#------
dist_com <- vegdist(varespec, method = "bray")
dist_chem <- vegdist(varechem, method = "euclidean")
x <-as.vector(dist_com)
y <- as.vector(dist_chem)
R <- round(cor(x, y, method="spearman"), 3)
xy <- data.frame (x, y)
mant <- ggplot(xy, aes(x=x, y=y))
mant + geom_point(size=3) + xlab ("Biological dissimilarity") + ylab ("Chemical dissimilarity") + annotate("text", x=0.25, y=0.35, label=latex2exp('\\alpha
x^\\alpha\\text{, where }\\alpha \\in \\text{1:5}')) + theme_bw() + geom_smooth(method = "lm", se = FALSE)
library(latex2exp)
mant + geom_point(size=3) + xlab ("Biological dissimilarity") + ylab ("Chemical dissimilarity") + annotate("text", x=0.25, y=0.35, label=latex2exp('\\alpha x^\\alpha\\text{, where }\\alpha \\in \\text{1:5}')) + theme_bw() + geom_smooth(method = "lm", se = FALSE)
latex2exp('\\alpha x^\\alpha\\text{, where }\\alpha \\in \\text{1:5}')
latex2exp("$\\alpha$")
latex2exp("The ratio of 1 and 2 is $\\frac{1}{2}$")
a <- 1:100
plot(a, a^2, xlab=latex2exp("$\\alpha$"), ylab=latex2exp("$\\alpha^2
$"))
latex2exp("$\\alpha$")
mant + geom_point(size=3) + xlab ("Biological dissimilarity") + ylab ("Chemical dissimilarity") + annotate("text", x=0.25, y=0.35, label=expression(latex2exp('\\alpha x^\\alpha\\text{, where }\\alpha \\in \\text{1:5}'))) + theme_bw() + geom_smooth(method = "lm", se = FALSE)
mant + geom_point(size=3) + xlab ("Biological dissimilarity") + ylab ("Chemical dissimilarity") + annotate("text", x=0.25, y=0.35, label=expression(latex2exp('\\alpha x^2'))) + theme_bw() + geom_smooth(method = "lm", se = FALSE)
mant + geom_point(size=3) + xlab ("Biological dissimilarity") + ylab ("Chemical dissimilarity") + annotate("text", x=0.25, y=0.35, label=latex2exp('\\alpha x^2')) + theme_bw() + geom_smooth(method = "lm", se = FALSE)
mant + geom_point(size=3) + xlab ("Biological dissimilarity") + ylab ("Chemical dissimilarity") + annotate("text", x=0.25, y=0.35, label=paste("Rspearmen =", R, sep=" ")) + theme_bw() + geom_smooth(method = "lm", se = FALSE)
mant + geom_point(size=3) + xlab ("Biological dissimilarity") + ylab ("Chemical dissimilarity") + annotate("text", x=0.25, y=0.35, label=paste("Rspearmen =", R, sep=" "), size = 5) + theme_bw() + geom_smooth(method = "lm", se = FALSE)
mant + geom_point(size=3) + xlab ("Biological dissimilarity") + ylab ("Chemical dissimilarity") + annotate("text", x=0.25, y=0.35, label=paste("Rspearmen =", R, sep=" "), size = 7) + theme_bw() + geom_smooth(method = "lm", se = FALSE)
2^ncol(varechem) - 1
getAnywhere(envfit.default)
getAnywhere(envfit.default)
